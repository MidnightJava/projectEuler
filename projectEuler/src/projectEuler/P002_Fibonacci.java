package projectEuler;

import java.util.stream.Stream;

import com.codepoetics.protonpack.StreamUtils;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:

 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.*/

public class P002_Fibonacci {
	public static void main(String[] args) {
		long sum = StreamUtils.takeWhile(Stream.iterate(1l, l -> fibonacci(l)), l -> l <= 4e6)
				.mapToLong(l -> l) //unbox
				.filter(l -> l % 2 == 0)
				.sum();

		System.err.println("sum: " + sum);
	}

	private static long f1 = 1;
	private static long f2 = 1;

	private static long fibonacci(long i) {
		f1 = f2;
		f2 = i;
		return f1 + f2;
	}

}
